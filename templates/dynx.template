// ${name} : name
// ${type}     : type
//------------------------------------------------------------------ ${name}
#pragma once
#include<stdlib.h>

#define ${name}_initial_cap 8
#define ${name}_realloc_strategy 'a'
#define ${name}_bounds_check 1

typedef struct ${name}{
	${type} data;/*owns*/
	size_t size;
	size_t cap;
}${name};
${name} _${name}_init_={NULL,0,0};

//--------------------------------------------------------------------- private

inline static void __${name}_insure_free_capcity(${name}*this,size_t n){
	const size_t rem=this->cap-this->size;
	if(rem>=n)
		return;
	if(this->data){
		size_t new_cap;
		switch(${name}_realloc_strategy){
		case 'a':
			new_cap=this->cap*2;
			break;
		default:
			fprintf(stderr,"\nunknown-strategy");
			fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
			exit(-1);
		}

		printf("   re-allocating vector %p\n",this->data);
		void* *new_data=realloc(this->data,sizeof(${type})*new_cap);
		if(!new_data){
			fprintf(stderr,"\nout-of-memory");
			fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
			exit(-1);
		}
		if(new_data!=this->data){ // re-locate
			printf("   re-allocated vector %p to %p\n",this->data,new_data);
			this->data=new_data;
		}
		this->cap=new_cap;
		return;
	}
	// initialize data
	this->cap=${name}_initial_cap;
	this->data=malloc(sizeof(${type})*this->cap);
	if(!this->data){
		fprintf(stderr,"\nout-of-memory");
		fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
		exit(-1);
	}
}


//---------------------------------------------------------------------- public

inline static void ${name}_add(${name}*this,${type} f){
	__${name}_insure_free_capcity(this,1);
	*(this->data+this->size++)=f;
}

//-----------------------------------------------------------------------------

inline static ${type} ${name}_get(${name}*this,size_t index){
#ifdef ${name}_bounds_check
	if(index>=this->cap){
		fprintf(stderr,"\nindex-out-of-bounds");
		fprintf(stderr,"\t%s\n\n%d  index: %zu    capacity: %zu\n",
				__FILE__,__LINE__,index,this->cap);
		exit(-1);
	}
#endif
	return*(this->data+index);
}

//-----------------------------------------------------------------------------

inline static size_t ${name}_size_in_bytes(${name}*this){
	return this->size*sizeof(${type});
}

//-----------------------------------------------------------------------------

inline static void ${name}_free(${name}*this){
	if(!this->data)
		return;
	free(this->data);
}

//-----------------------------------------------------------------------------
