#pragma once
//-----------------------------------------------------------------------------
// ${name} allocator generated from template 
//-----------------------------------------------------------------------------
#include"${name}.h"
#define ${name}_count 1024
//--------------------------------------------------------------------- storage
static ${name} ${nameplr}[${name}_count];
static ${name}*${nameplr}_start_ptr=${nameplr};
static ${name}*${nameplr}_seek_ptr=${nameplr};
static ${name}*${nameplr}_end_ptr=${nameplr}+${name}_count;
//------------------------------------------------------------------------ bits
static bits ${nameplr}_bits[${name}_count];
static bits*${nameplr}_bits_start_ptr=${nameplr}_bits;
static bits*${nameplr}_bits_seek_ptr=${nameplr}_bits;
static bits*${nameplr}_bits_end_ptr=${nameplr}_bits+${name}_count;
//----------------------------------------------------------------------- alloc
inline static ${name}*${name}_alloc(${name}*initializer){
	int iterate_to_scan_the_table=2;
	while(iterate_to_scan_the_table--){
		while(${nameplr}_bits_seek_ptr<${nameplr}_bits_end_ptr){
			if(bits_is_bit_set(${nameplr}_bits_seek_ptr,0)){
				${nameplr}_bits_seek_ptr++;
				${nameplr}_seek_ptr++;
				continue;
			}
			bits_set_bit(${nameplr}_bits_seek_ptr,0);
			${name}*o=${nameplr}_seek_ptr;
			${nameplr}_seek_ptr++;
			${nameplr}_bits_seek_ptr++;
			*o=initializer?*initializer:${name}_def;
			o->ptr_bits=${nameplr}_bits_seek_ptr;
			return o;
		}
		${nameplr}_bits_seek_ptr=${nameplr}_bits_start_ptr;
		${nameplr}_seek_ptr=${nameplr}_start_ptr;
	}
	perror("out of objects");
	exit(6);
}
//--------------------------------------------------------------------- recycle
inline static void ${name}_free(${name}*o){
	bits_clear(o->ptr_bits,0);
}
//-----------------------------------------------------------------------------
