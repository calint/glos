#pragma once
//-----------------------------------------------------------------------------
// ${name} allocator generated from template ... do not modify
//-----------------------------------------------------------------------------
#include"${name}.h"
#include"part.h"
#define ${name}_count 1024
#define ${name}_assert_free
//--------------------------------------------------------------------- storage
static ${name} ${nameplr}[${name}_count];
static ${name}*${nameplr}_start_ptr=${nameplr};
static ${name}*${nameplr}_seek_ptr=${nameplr};
static ${name}*${nameplr}_end_ptr=${nameplr}+${name}_count;
//------------------------------------------------------------------------ bits
static bits ${nameplr}_bits[${name}_count];
static bits*${nameplr}_bits_start_ptr=${nameplr}_bits;
static bits*${nameplr}_bits_seek_ptr=${nameplr}_bits;
static bits*${nameplr}_bits_end_ptr=${nameplr}_bits+${name}_count;
//----------------------------------------------------------------------- alloc
inline static ${name}*${name}_alloc(${name}*initializer){
	int iterate_to_scan_the_table=2;
	while(iterate_to_scan_the_table--){
		while(${nameplr}_bits_seek_ptr<${nameplr}_bits_end_ptr){

			// *** critical begin
			if(*${nameplr}_bits_seek_ptr&1){// is allocated
				${nameplr}_bits_seek_ptr++;
				${nameplr}_seek_ptr++;
				continue;
			}
			*${nameplr}_bits_seek_ptr=1;// allocate
			// *** critical end

			${name}*o=${nameplr}_seek_ptr++;
			*o=initializer?*initializer:${name}_def;
			o->ptr_to_bits=${nameplr}_bits_seek_ptr++;

			if (o->init)
				o->init(o);

			return o;
		}
		${nameplr}_bits_seek_ptr=${nameplr}_bits_start_ptr;
		${nameplr}_seek_ptr=${nameplr}_start_ptr;
	}
	perror("out of ${nameplr}");
	exit(6);
}
//------------------------------------------------------------------------ free
inline static void ${name}_free(${name}*o){
#ifdef ${name}_assert_free
	if(*o->ptr_to_bits|2){ // is flagged deleted
		fprintf(stderr,"\n${name}-already-deleted");
		fprintf(stderr,"\tfile: '%s'  line: %d\n%p\n",
				__FILE__,__LINE__,
				(void*)o);
		exit(-1);
	}
#endif
	*o->ptr_to_bits=2;// flag not allocated and deleted
}
//------------------------------------------------------------------- accessors

inline static ${name}*${name}_at(arrayix i){return&${nameplr}[i];}

inline static const ${name}*${name}_at_const(arrayix i){return&${nameplr}[i];}

inline static void ${nameplr}_free() {
	${name}*o=${nameplr};
	while(o<${nameplr}_end_ptr){
		if(!o->ptr_to_bits){
			o++;
			continue;
		}

		{/*** critical ****/
		if(*o->ptr_to_bits&1){
			*o->ptr_to_bits&=(unsigned char)~(1|2);
		}else{
			o++;
			continue;
		}
		/*** critical done ****/}

		if(o->free)
			o->free(o);

		for(int i=0;i<${name}_part_cap;i++){
			if(!o->part[i])
				continue;
			part*p=(part*)o->part[i];
			if(p->free)
				p->free(o,p);
		}

		o++;
	}
}
