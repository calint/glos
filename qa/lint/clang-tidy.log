tis  9 jan 2024 08:38:32 CET
/home/c/w/glos/qa/lint/../../src/application/application.cpp:138:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
    asteroid_large *ast = new (objects.alloc()) asteroid_large{};
    ^~~~~~~~~~~~~~
    auto
/home/c/w/glos/qa/lint/../../src/engine/../application/../engine/engine.hpp:204:15: warning: method 'free' can be made static [readability-convert-member-functions-to-static]
  inline void free() {
              ^
  static 
/home/c/w/glos/qa/lint/../../src/engine/../application/../engine/engine.hpp:609:64: warning: use nullptr [hicpp-use-nullptr,modernize-use-nullptr]
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (GLvoid *)0);
                                                               ^
                                                               nullptr
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:12:17: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  int const r = rand();
                ^
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:12:17: warning: function is not thread safe [concurrency-mt-unsafe]
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:21:17: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  int const r = rand();
                ^
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:21:17: warning: function is not thread safe [concurrency-mt-unsafe]
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:30:17: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
  int const r = rand();
                ^
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:30:17: warning: function is not thread safe [concurrency-mt-unsafe]
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/../utils.hpp:61:3: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  power_up *pu = new (objects.alloc()) power_up{};
  ^~~~~~~~
  auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/asteroid_large.hpp:60:7: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      asteroid_medium *ast = new (objects.alloc()) asteroid_medium{};
      ^~~~~~~~~~~~~~~
      auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/asteroid_medium.hpp:59:7: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      asteroid_small *ast = new (objects.alloc()) asteroid_small{};
      ^~~~~~~~~~~~~~
      auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/bullet.hpp:50:5: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
    fragment *frg = new (objects.alloc()) fragment{};
    ^~~~~~~~
    auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/ship.hpp:89:7: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      fragment *frg = new (objects.alloc()) fragment{};
      ^~~~~~~~
      auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/ship.hpp:111:7: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      bullet *blt = new (objects.alloc()) bullet{};
      ^~~~~~
      auto
/home/c/w/glos/qa/lint/../../src/engine/../application/objects/ship.hpp:120:9: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
        bullet *blt = new (objects.alloc()) bullet{};
        ^~~~~~
        auto
/home/c/w/glos/qa/lint/../../src/engine/../application/../engine/engine.hpp:204:15: warning: method 'free' can be made static [readability-convert-member-functions-to-static]
  inline void free() {
              ^
  static 
/home/c/w/glos/qa/lint/../../src/engine/../application/../engine/engine.hpp:609:64: warning: use nullptr [hicpp-use-nullptr,modernize-use-nullptr]
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (GLvoid *)0);
                                                               ^
                                                               nullptr
/home/c/w/glos/qa/lint/../../src/engine/glob.hpp:249:37: warning: use nullptr [hicpp-use-nullptr,modernize-use-nullptr]
                          (GLvoid *)0);
                                    ^
                                    nullptr
/home/c/w/glos/qa/lint/../../src/engine/hud.hpp:51:37: warning: use nullptr [hicpp-use-nullptr,modernize-use-nullptr]
                          (GLvoid *)0);
                                    ^
                                    nullptr
/home/c/w/glos/qa/lint/../../src/engine/net_server.hpp:61:23: warning: prefer accept4() to accept() because accept4() allows SOCK_CLOEXEC [android-cloexec-accept]
      clients_fd[i] = accept(server_fd, nullptr, nullptr);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      accept4(server_fd, nullptr, nullptr, SOCK_CLOEXEC)
/home/c/w/glos/qa/lint/../../src/engine/object.hpp:11:7: warning: constructor does not initialize these fields: alloc_ptr [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
class object {
      ^
/home/c/w/glos/qa/lint/../../src/engine/object.hpp:64:44: warning: parameter 'obj' is unused [misc-unused-parameters]
  inline virtual auto on_collision(object *obj) -> bool { return true; }
                                           ^~~
                                            /*obj*/
/home/c/w/glos/qa/lint/../../src/engine/sdl.hpp:10:15: warning: method 'init' can be made static [readability-convert-member-functions-to-static]
  inline void init() {
              ^
  static 
/home/c/w/glos/qa/lint/../../src/engine/sdl.hpp:19:15: warning: method 'free' can be made static [readability-convert-member-functions-to-static]
  inline void free() { SDL_Quit(); }
              ^
  static 
/home/c/w/glos/qa/lint/../../src/engine/texture.hpp:60:25: warning: std::move of the variable 'tex' of the trivially-copyable type 'texture' has no effect [hicpp-move-const-arg,performance-move-const-arg]
    store.insert({path, std::move(tex)});
                        ^
/home/c/w/glos/qa/lint/../../src/engine/token.h:3:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef struct token {
^~~~~~~~~~~~~~~~~~~~~~
tis  9 jan 2024 08:39:39 CET
