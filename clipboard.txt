git reset --hard HEAD


# tag with date and time
TAG=$(date "+%Y-%m-%d--%H-%M") && git tag $TAG && git push origin $TAG



cat stacktrace | awk '{print $2}'|cut -c 2-9 | while read addr; do
	addr2line -e glos $addr
done



#pragma once
// object
//   |
//   +--- actor
//   |      |
//   |      +--- ninja
//   |      |
//   |      +--- santa
//   |
//   +--- projectile
//   |       |
//   |       |
//   |       |

#define type_actor {'a',0,0,0,0,0,0,0}
#define type_ninja {'a','a',0,0,0,0,0,0}
#define type_santa {'a','b',0,0,0,0,0,0}
#define type_bullet {'b',0,0,0,0,0,0,0}



		fprintf(stderr,"\n%s:%u: could not connect\n",__FILE__,__LINE__);
		fprintf(stderr,"    server: %s  port: %d\n\n",host,port);
		stacktrace_print(stderr);
		fprintf(stderr,"\n\n");
		exit(-1);


			const char*nm="santa1";
			inline int f1(object*o){
				if(o->name.count)
					return strcmp(o->name.data,nm);
				return -1;
			}
			inline int f2(object*o){
				printf("%f\n",o->p.p.x);
				return 0;
			}
			objects_foreach(f1,f2);



#ifdef glos_assert_bounds
	if(i>=glos_cap){
		fprintf(stderr,"\nout of bounds\n");
		fprintf(stderr,"\n    %s %d\n",__FILE__,__LINE__);
		exit(-1);
	}
#endif





//inline static void main_init2(){
//	globs_load_obj_file(1,"obj/ico_sphere.obj");
//	globs_load_obj_file(2,"obj/cylinder.obj");
//	globs_load_obj_file(3,"obj/grid_8x8.obj");
//	globs_load_obj_file(4,"obj/plane.obj");
//	globs_load_obj_file(5,"obj/sphere.obj");
//
//	for(int i=0;i<object_cap;i++){
//		object*o=object_alloc(&ninja_def);
//
//		o->glob_id=(gid)random_range(1,6);
//		if(o->glob_id==6)o->glob_id=5;
//
//		const float vr=.5f;
//		o->velocity=(velocity){
//			random_range(-vr,vr),random_range(-vr,vr),0,0};
//
//		const float ar=360;
//		o->angular_velocity=(angular_velocity){
//			0,0,random_range(-ar,ar),0};
//
//		const float sr=.02f;
//		o->scale=(scale){
//			random_range(-sr,sr),
//			random_range(-sr,sr),
//			random_range(-sr,sr),1};
//	}
//}

	dyni di=dyni_default;
	dyni_add(&di,2);
	dyni_add(&di,3);
	dyni_add(&di,4);
	dyni_add(&di,5);










//inline static void dynpvec_add_all(dynpvec*this){}
//inline static void dynpvec_remove_ptr(dynpvec*this,void*ptr){}
//inline static void dynpvec_remove_at_index(dynpvec*this,size_t index){}
//inline static void dynpvec_insert_before(dynpvec*this,void*ptr){}
//inline static void dynpvec_insert_after(dynpvec*this,void*ptr){}
//inline static void dynpvec_insert_before(dynpvec*this,size_t index){}
//inline static void dynpvec_insert_after(dynpvec*this,size_t index){}




//while(argc--)puts(*argv++);
//{
//	dynpvec v=_dynpvec_init_;
//	int a=1,b=2,c=3;
//	dynpvec_add(&v,&a);
//	dynpvec_add(&v,&b);
//	dynpvec_add(&v,&c);
//
//	printf(" %d  %d   %d\n",
//			*((int*)dynpvec_get(&v,0)),
//			*((int*)dynpvec_get(&v,1)),
//			*((int*)dynpvec_get(&v,2))
//		);
//
//	int*p=(int*)dynpvec_get(&v,0);
//	if(*p!=a){exit(-1);}
//	if(p!=&a){exit(-1);}
//	p=dynpvec_get(&v,2);
//	if(p!=&c){exit(-1);}
//	puts("ok");
//	exit(0);
//}






//#define cpu_level1_cache_line_size 64
//#define GLOS_EMBEDDED


//			FILE*f=fopen("/home/c/w/glos/dump.txt","w");
//			// position(x,y,z) normal(x,y,z)
//			for(size_t i=0;i<vertices.size;i++){
//				vec4*v=(vec4*)dynpvec_get(&vertices,i);
//				fprintf(f,"v %f %f %f\n",v->x,v->y,v->z);
//			}
//			// position(x,y,z) normal(x,y,z)
//			for(size_t i=0;i<normals.size;i++){
//				vec4*v=(vec4*)dynpvec_get(&normals,i);
//				fprintf(f,"vn %.4f %.4f %.4f\n",v->x,v->y,v->z);
//			}
//			fclose(f);
//			exit(0);
//inline static void dbg(const char*p){
//	while(1){
//		if(!*p)return;
//		if(*p=='\n')break;
//		putchar(*p++);
//	}
//	putchar('\n');
//}
//





template<dynf>
//------------------------------------------------------------------------ dynf
#pragma once
#include<stdlib.h>

#define ${template}_initial_cap 8
#define ${template}_realloc_strategy 'a'
#define ${template}_bounds_check 1

typedef struct ${template}{
	float*data;/*owns*/
	size_t size;
	size_t cap;
}${template};
${template} _${template}_init_={NULL,0,0};

//--------------------------------------------------------------------- private

inline static void __${template}_insure_free_capcity(${template}*this,size_t n){
	const size_t rem=this->cap-this->size;
	if(rem>=n)
		return;
	if(this->data){
		size_t new_cap;
		switch(${template}_realloc_strategy){
		case 'a':
			new_cap=this->cap*2;
			break;
		default:
			fprintf(stderr,"\nunknown-strategy");
			fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
			exit(-1);
		}

		printf("   re-allocating vector %p\n",this->data);
		void* *new_data=realloc(this->data,sizeof(float)*new_cap);
		if(!new_data){
			fprintf(stderr,"\nout-of-memory");
			fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
			exit(-1);
		}
		if(new_data!=this->data){ // re-locate
			printf("   re-allocated vector %p to %p\n",this->data,new_data);
			this->data=new_data;
		}
		this->cap=new_cap;
		return;
	}
	// initialize data
	this->cap=${template}_initial_cap;
	this->data=malloc(sizeof(float)*this->cap);
	if(!this->data){
		fprintf(stderr,"\nout-of-memory");
		fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
		exit(-1);
	}
}


//---------------------------------------------------------------------- public

inline static void ${template}_add(${template}*this,float f){
	__${template}_insure_free_capcity(this,1);
	*(this->data+this->size++)=f;
}

//-----------------------------------------------------------------------------

inline static float ${template}_get(${template}*this,size_t index){
#ifdef dynf_bounds_check
	if(index>=this->cap){
		fprintf(stderr,"\nindex-out-of-bounds");
		fprintf(stderr,"\t%s\n\n%d  index: %zu    capacity: %zu\n",
				__FILE__,__LINE__,index,this->cap);
		exit(-1);
	}
#endif
	return*(this->data+index);
}

//-----------------------------------------------------------------------------

inline static size_t ${template}_size_in_bytes(dynf*this){
	return this->size*sizeof(float);
}

//-----------------------------------------------------------------------------

inline static void ${template}_free(dynf*this){
	if(!this->data)
		return;
	free(this->data);
}

//-----------------------------------------------------------------------------





//	int width=1,height=1;
//	float pixels[]={0.0f, 0.5f, 0.0f};
//

	// x,y,  u,v,
	float vertecies[]={
			-1,-1,  0,0,
			 1,-1,  1,0,
			  1,1,  1,1,
			 -1,1,  1,0,
	};

	// texture
	int width=2,height=2;
	float pixels[]={
			1.0f, 0.0f, 0.0f,   0.0f, 0.0f, .5f,
			0.0f, 0.0f, 1.0f,   1.0f, 1.0f, 0.0f
	};

	GLuint vertex_buffer_id;
	glGenBuffers(1,&vertex_buffer_id);
	glBindBuffer(GL_ARRAY_BUFFER,vertex_buffer_id);
	glBufferData(GL_ARRAY_BUFFER,sizeof(vertecies)*sizeof(float),vertecies,
			GL_STATIC_DRAW);

	GLuint textureID;
	glGenTextures(1,&textureID);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D,textureID);
	glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,width,height,0,GL_RGB,GL_FLOAT,pixels);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);


//	fragment_shader_id
	GLuint program_id=glCreateProgram();
	GLuint vertex_shader_id=glCreateShader(GL_VERTEX_SHADER);
	const char vertex_shader_source[]={
			"#version 100                                                \n\
	attribute vec2 apos;// positions  xy                            \n\
	attribute vec2 atex;// texture uv                              \n\
	varying vec2 vtex;             \n\
	void main(){                                                 \n\
		gl_Position=vec4(apos,0,1);                        \n\
		vtex=atex;                                             \n\
	}\n"
	};
	int length=(int)strlen(vertex_shader_source);
	glShaderSource(vertex_shader_id,1,
			(const GLchar**)&vertex_shader_source,&length);
	glCompileShader(vertex_shader_id);
	GLint compile_ok;
	glGetShaderiv(vertex_shader_id,GL_COMPILE_STATUS,&compile_ok);
	if(!compile_ok){
		GLchar messages[1024];
		glGetShaderInfoLog(vertex_shader_id,sizeof(messages),
				NULL,&messages[0]);
		printf("compiler error in vertex shader:\n%s\n",messages
		);
		exit(7);
	}
	glAttachShader(program_id,vertex_shader_id);
	GLuint fragment_shader_id=glCreateShader(GL_FRAGMENT_SHADER);
	const char fragment_shader_source[]={
			"#version 100\n\
			uniform sampler2D utex;                    \n\
			varying mediump vec2 vtex;                \n\
			void main(){             \n\
				gl_FragColor=texture2D(utex,vtex);         \n\
			}\n"
	};
	glCompileShader(GL_FRAGMENT_SHADER);
	glGetShaderiv(fragment_shader_id,GL_COMPILE_STATUS,&compile_ok);
	if(!compile_ok){
		GLchar messages[1024];
		glGetShaderInfoLog(fragment_shader_id,
				sizeof(messages),NULL,&messages[0]);
		printf("compiler error in vertex shader:\n%s\n",messages
		);
		exit(7);
	}
	glAttachShader(program_id,vertex_shader_id);
	glAttachShader(program_id,fragment_shader_id);


	glLinkProgram(program_id);
	glGetProgramiv(program_id,GL_LINK_STATUS,&compile_ok);
	if(!compile_ok){
		GLint len;
		glGetProgramiv(program_id,GL_INFO_LOG_LENGTH,&len);
		GLchar msg[1024*4];
		glGetProgramInfoLog(program_id,len,NULL,&msg[0]);
		printf("program linking error: %s\n",msg);
		exit(8);
	}


	GLint apos=glGetAttribLocation(program_id,"apos");
	GLint atex=glGetAttribLocation(program_id,"atex");
	glUniform1i(glGetUniformLocation(program_id,"utex"),0);
	glUseProgram(program_id);
	glEnableVertexAttribArray(apos);
	glEnableVertexAttribArray(atex);


	glDrawArrays(GL_ARRAY_BUFFER,0,6);
	SDL_GL_SwapWindow(window.ref);
	sleep(60);








